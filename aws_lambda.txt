import math, random
from statistics import mean, stdev

def lambda_handler(event, context):
    dt = eval(event['key1'])
    close = eval(event['key2'])
    buy = eval(event['key3'])
    sell = eval(event['key4'])
    h = int(event['key5'])
    d = int(event['key6'])
    t = event['key7']
    r = int(event['key8'])
    minhistory = int(h)
    shots = int(d)
    var95_list = []
    var99_list = []
    dates = []
    for i in range(minhistory, len(close)):
        if t == "buy":
            if buy[i] == 1: # if we’re interested in Buy signals
                close_data = close[i-minhistory:i]
                pct_change = [(close_data[i] - close_data[i-1]) / close_data[i-1] for i in range(1,len(close_data))]
                mn = mean(pct_change)
                std = stdev(pct_change)
                # generate much larger random number series with same broad characteristics 
                simulated = [random.gauss(mn,std) for x in range(shots)]
                # sort and pick 95% and 99%  - not distinguishing long/short risks here
                simulated.sort(reverse=True)
                var95 = simulated[int(len(simulated)*0.95)]
                var99 = simulated[int(len(simulated)*0.99)]
                var95_list.append(var95)
                var99_list.append(var99)
                dates.append(str(dt[i]))
        elif t == "sell":
            if sell[i] == 1: # if we’re interested in Sell signals
                close_data = close[i-minhistory:i]
                pct_change = [(close_data[i] - close_data[i-1]) / close_data[i-1] for i in range(1,len(close_data))]
                mn = mean(pct_change)
                std = stdev(pct_change)
                # generate much larger random number series with same broad characteristics 
                simulated = [random.gauss(mn,std) for x in range(shots)]
                # sort and pick 95% and 99%  - not distinguishing long/short risks here
                simulated.sort(reverse=True)
                var95 = simulated[int(len(simulated)*0.95)]
                var99 = simulated[int(len(simulated)*0.99)]
                var95_list.append(var95)
                var99_list.append(var99)
                dates.append(str(dt[i]))
    return (dates, var95_list, var99_list)
